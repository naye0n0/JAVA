객체지향 OOP
1. 객체는 내가 작성한 class에 숨을 불어넣어 만든다(new)(메모리 할당)
2. 객체는 정보(변수)와 행동(매서드)를 가진다.
3. 보기 편하고 생산성이 좋음 

package gnuvill;

public class game {

		static class Player{
			
			String name;
			int hp;
			int atk;
			
			public Player(String name, int hp,int atk){
				this.name=name;
				this.hp=hp;
				this.atk=atk;
			}
			public void attack(Enemy enemy) {
				System.out.println("Player Attack!");
				enemy.hp-=this.atk;
				System.out.println("Enemy hp : "+enemy.hp);
			}
			public boolean islive() {
				if(hp<=0) {
					return false;
				}else {
					return true;
				}
			}
		}
		static class Enemy{
			String name;
			int hp;
			int atk;
			
			public Enemy(String name, int hp,int atk){
				this.name=name;
				this.hp=hp;
				this.atk=atk;
			}
			public void attack(Player player) {
				System.out.println("Enemy Attack!");
				player.hp-=this.atk;
				System.out.println("player hp : "+player.hp);
			}public boolean islive() {
				if(hp<=0) {
					return false;
				}else {
					return true;
				}
			}
		}
		
		public static void main(String[]args) {
			
			Player player = new Player("gamepari",100,12);
			Enemy enemy = new Enemy("Orc",80,5);
			
			while(player.islive() && enemy.islive()){
				player.attack(enemy);
				if(!enemy.islive()) break; 
				//false가 되면 반복문이 돌아가지 않으므로 ! 붙여서 돌아가게 
				enemy.attack(player);
				
			}
			if (player.islive()){
				System.out.println("player win");
			}else {
				System.out.println("enemy win");
			}
			
		}
	}



